name: PR AI Review

on:
  pull_request_target:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: pr-review-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      HYPERBOLIC_API_KEY: ${{ secrets.HYPERBOLIC_API_KEY }}
      HYPERBOLIC_BASE_URL: https://api.hyperbolic.xyz/v1
      MODEL_SUMMARY: deepseek-ai/DeepSeek-R1-0528
      MODEL_REVIEW: qwen/Qwen3-Coder-480B-A35B-Instruct

    steps:
      # Do NOT checkout PR code. Keep the runner clean of untrusted code.

      - name: Setup Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 20

      - name: Assert secrets present
        run: |
          if [ -z "${HYPERBOLIC_API_KEY}" ]; then
            echo "HYPERBOLIC_API_KEY missing (secrets are available on pull_request_target). Add it under Settings > Secrets > Actions." >&2
            exit 1
          fi

      - name: Install deps
        run: |
          npm -y init
          npm i node-fetch@3 @octokit/rest@20
          # Silence ESM warning
          node -e "const f='package.json';const j=require('fs').readFileSync(f,'utf8');const o=JSON.parse(j);o.type='module';require('fs').writeFileSync(f,JSON.stringify(o,null,2));"

      - name: Prepare workspace
        run: mkdir -p .github

      - name: Run PR AI Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > .github/ai-pr-review.js <<'EOF'
          import { Octokit } from "@octokit/rest";
          import fs from "node:fs";
          import fetch from "node-fetch";

          const {
            GITHUB_REPOSITORY,
            GITHUB_EVENT_PATH,
            GITHUB_TOKEN,
            HYPERBOLIC_API_KEY,
            HYPERBOLIC_BASE_URL = "https://api.hyperbolic.xyz/v1",
            MODEL_SUMMARY = "deepseek-ai/DeepSeek-R1-0528",
            MODEL_REVIEW  = "qwen/Qwen3-Coder-480B-A35B-Instruct",
          } = process.env;

          if (!HYPERBOLIC_API_KEY) { console.error("HYPERBOLIC_API_KEY is empty"); process.exit(1); }
          if (!GITHUB_TOKEN) { console.error("GITHUB_TOKEN is empty"); process.exit(1); }

          const event = JSON.parse(fs.readFileSync(GITHUB_EVENT_PATH, "utf8"));
          const [owner, repo] = GITHUB_REPOSITORY.split("/");
          const prNumber = event.pull_request?.number;
          if (!prNumber) { console.error("No pull_request.number"); process.exit(1); }

          const octokit = new Octokit({ auth: GITHUB_TOKEN });

          // Fetch unified diff and file list from API (safe for forks)
          const diffResp = await octokit.request("GET /repos/{owner}/{repo}/pulls/{pull_number}", {
            owner, repo, pull_number: prNumber,
            headers: { accept: "application/vnd.github.v3.diff" },
          });
          const diff = diffResp.data;

          const files = (await octokit.pulls.listFiles({
            owner, repo, pull_number: prNumber, per_page: 300
          })).data;

          const fileList = files.map(f => `${f.filename} (+${f.additions}/-${f.deletions})`).join("\n");

          const chunk = (t, n=12000)=>{ const a=[]; for(let i=0;i<t.length;i+=n)a.push(t.slice(i,i+n)); return a; };
          const chunks = chunk(diff);

          async function chat(model, messages, max_tokens=1200, temperature=0.2) {
            const res = await fetch(`${HYPERBOLIC_BASE_URL}/chat/completions`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${HYPERBOLIC_API_KEY}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ model, messages, temperature, max_tokens })
            });
            if (!res.ok) throw new Error(`HTTP ${res.status}: ${await res.text()}`);
            const j = await res.json();
            return j.choices?.[0]?.message?.content?.trim() ?? "";
          }

          // Stage A: summary/plan
          const planPrompt = `
          Summarize this pull request:
          - Purpose and intent
          - Key files changed
          - Risks, side effects, performance or security implications
          - Which files deserve deeper review
          Title: ${event.pull_request.title}
          Body: ${event.pull_request.body || "(no description)"}
          Files:
          ${fileList}
          `;
          const plan = await chat(MODEL_SUMMARY, [
            { role: "system", content: "You are a senior engineer producing structured summaries." },
            { role: "user", content: planPrompt },
          ], 900, 0.1);

          // Stage B: detailed review
          const reviews = [];
          for (let i=0;i<chunks.length;i++){
            const prompt = `
            Review this diff chunk. Find correctness, security, performance issues.
            Propose concrete improvements and minimal patches.
            Context plan:
            ${plan}

            Diff chunk ${i+1}:
            ${chunks[i]}
            `;
            try {
              const out = await chat(MODEL_REVIEW, [
                { role: "system", content: "You are a rigorous code reviewer. Be terse and specific." },
                { role: "user", content: prompt },
              ], 1400, 0.1);
              reviews.push(`### Chunk ${i+1}\n${out}`);
            } catch(e){
              reviews.push(`### Chunk ${i+1}\nLLM error: ${e.message}`);
            }
          }

          // Synthesis
          const synthesis = await chat(MODEL_SUMMARY, [
            { role: "system", content: "Merge and dedupe findings. Sections: Summary, Key Findings, Risks, Suggestions, Tests to Add. Keep short." },
            { role: "user", content: reviews.join("\n\n") },
          ], 1200, 0.15);

          // Post comments
          await octokit.issues.createComment({
            owner, repo, issue_number: prNumber,
            body: `ðŸ¤– **AI PR Summary** (model: \`${MODEL_SUMMARY}\`)\n\n${plan}`
          });
          await octokit.issues.createComment({
            owner, repo, issue_number: prNumber,
            body: `ðŸ¤– **AI Code Review** (model: \`${MODEL_REVIEW}\`)\n\n${synthesis}`
          });

          console.log("Two-stage AI review posted.");
          EOF

          node .github/ai-pr-review.js
