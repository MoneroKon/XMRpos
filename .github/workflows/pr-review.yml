name: PR AI Review

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: pr-review-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  ai-review:
    if: github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      HYPERBOLIC_API_KEY: ${{ secrets.HYPERBOLIC_API_KEY }}
      HYPERBOLIC_BASE_URL: https://api.hyperbolic.xyz/v1
      MODEL_SUMMARY: deepseek-ai/DeepSeek-R1-0528
      MODEL_REVIEW: qwen/Qwen3-Coder-480B-A35B-Instruct

    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm --yes init -y
          npm i node-fetch@3 @octokit/rest@20

      - name: Run PR AI Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .github
          cat > .github/ai-pr-review.js <<'EOF'
          import { Octokit } from "@octokit/rest";
          import fs from "node:fs";

          const {
            GITHUB_REPOSITORY,
            GITHUB_EVENT_PATH,
            HYPERBOLIC_API_KEY,
            HYPERBOLIC_BASE_URL = "https://api.hyperbolic.xyz/v1",
            MODEL_SUMMARY = "deepseek-ai/DeepSeek-R1-0528",
            MODEL_REVIEW = "qwen/Qwen3-Coder-480B-A35B-Instruct",
            GITHUB_TOKEN,
          } = process.env;

          if (!HYPERBOLIC_API_KEY || !GITHUB_TOKEN) {
            console.error("Missing API or GitHub token");
            process.exit(1);
          }

          const event = JSON.parse(fs.readFileSync(GITHUB_EVENT_PATH, "utf8"));
          const [owner, repo] = GITHUB_REPOSITORY.split("/");
          const prNumber = event.pull_request.number;
          const octokit = new Octokit({ auth: GITHUB_TOKEN });

          async function fetchDiff() {
            const r = await octokit.request(
              "GET /repos/{owner}/{repo}/pulls/{pull_number}",
              {
                owner,
                repo,
                pull_number: prNumber,
                headers: { accept: "application/vnd.github.v3.diff" },
              }
            );
            return r.data;
          }

          async function listFiles() {
            const res = await octokit.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber,
              per_page: 300,
            });
            return res.data;
          }

          const diff = await fetchDiff();
          const files = await listFiles();

          const chunk = (text, size = 12000) => {
            const out = [];
            for (let i = 0; i < text.length; i += size)
              out.push(text.slice(i, i + size));
            return out;
          };
          const chunks = chunk(diff);

          async function callLLM(model, messages, max_tokens = 1200, temperature = 0.2) {
            const res = await fetch(`${HYPERBOLIC_BASE_URL}/chat/completions`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${HYPERBOLIC_API_KEY}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                model,
                messages,
                temperature,
                max_tokens,
              }),
            });
            if (!res.ok) {
              const err = await res.text();
              throw new Error(`HTTP ${res.status}: ${err}`);
            }
            const json = await res.json();
            return json.choices?.[0]?.message?.content?.trim() || "";
          }

          // ---- Stage A: Summary / reasoning ----
          const fileSummary = files
            .map(f => `${f.filename} (+${f.additions}/-${f.deletions})`)
            .join("\\n");
          const planPrompt = `
          Summarize this pull request:
          - Purpose and intent
          - Key files changed
          - Risks, side effects, performance or security implications
          - Suggest which files require detailed review

          Title: ${event.pull_request.title}
          Body: ${event.pull_request.body || "(no description)"}
          Files:
          ${fileSummary}
          `;

          const plan = await callLLM(MODEL_SUMMARY, [
            { role: "system", content: "You are a senior software engineer producing structured summaries." },
            { role: "user", content: planPrompt },
          ], 900, 0.1);

          // ---- Stage B: Code review ----
          const reviews = [];
          for (let i = 0; i < chunks.length; i++) {
            const prompt = `
            Review this diff.
            Identify logical, security, or performance bugs.
            Suggest concrete improvements or alternative implementations.

            Plan context:
            ${plan}

            Diff chunk ${i + 1}:
            ${chunks[i]}
            `;
            try {
              const text = await callLLM(MODEL_REVIEW, [
                { role: "system", content: "You are an expert code reviewer. Use terse, actionable bullet points." },
                { role: "user", content: prompt },
              ], 1400, 0.15);
              reviews.push(`### Chunk ${i + 1}\\n${text}`);
            } catch (e) {
              reviews.push(`### Chunk ${i + 1}\\nError: ${e.message}`);
            }
          }

          const synthesis = await callLLM(MODEL_SUMMARY, [
            { role: "system", content: "Merge and deduplicate findings. Keep short." },
            { role: "user", content: reviews.join("\\n\\n") },
          ], 1200, 0.15);

          const bodySummary =
            `ðŸ¤– **AI PR Summary** (model: \`${MODEL_SUMMARY}\`)\\n\\n${plan}`;
          const bodyReview =
            `ðŸ¤– **AI Code Review** (model: \`${MODEL_REVIEW}\`)\\n\\n${synthesis}`;

          await octokit.issues.createComment({
            owner,
            repo,
            issue_number: prNumber,
            body: bodySummary,
          });
          await octokit.issues.createComment({
            owner,
            repo,
            issue_number: prNumber,
            body: bodyReview,
          });

          console.log("AI review complete");
          EOF

          node .github/ai-pr-review.js
